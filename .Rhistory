# check whether K is a number or a column
# ck <- try(is.numeric(K),silent = T)
if (is.numeric(K)) {
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
} else {
K <- enquo(K)
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(!!K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-!!K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
}
return(df)
}
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=100,
L=7.5)
#' df <- read.csv(file = system.file("extdata", "Soil_resp_example.csv", package = "FluxGapsR"),
#' header=T)
#'
#' # convert the data into long format
#' df <- df %>%
#' pivot_long(cols = contains("SFD"),
#'            names_to = c(".value","Depth"),
#'            names_sep = 7)
#'
#' @export
Cal_HFD <- function(data,
T_up=NULL,
T_low=NULL,
T_side=NULL,
K,
L, # sapwood depth, cm
Dst = 0.0025, # thermal diffusivity, cm2 s-1
Zax = 1.5, # axial distance, cm
Ztg = 0.5 # tangential distance, cm
) {
# if no temperature or difference info is provided
# if (is.null(T_up)) {
#   stop("Temperature columns need to be assigned!")
# }
# check whether K is a number or a column
# ck <- try(is.numeric(K),silent = T)
if (is.numeric(K)) {
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
} else {
stop("ee")
# K <- enquo(K)
# T_up <- enquo(T_up) # specify as a variable name
# T_low <- enquo(T_low)
# T_side <- enquo(T_side)
# df <- data %>%
#   mutate(Sym=!!T_up-!!T_low,
#          Asym=!!T_side-!!T_low,
#          SFD_hfd = ifelse(Sym>0,
#                           3600*Dst*(!!K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
#                           -3600*Dst*(-!!K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
#          )
#   )
}
return(df)
}
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=100,
L=7.5)
View(df_hfd)
#' df <- read.csv(file = system.file("extdata", "Soil_resp_example.csv", package = "FluxGapsR"),
#' header=T)
#'
#' # convert the data into long format
#' df <- df %>%
#' pivot_long(cols = contains("SFD"),
#'            names_to = c(".value","Depth"),
#'            names_sep = 7)
#'
#' @export
Cal_HFD <- function(data,
T_up=NULL,
T_low=NULL,
T_side=NULL,
K,
L, # sapwood depth, cm
Dst = 0.0025, # thermal diffusivity, cm2 s-1
Zax = 1.5, # axial distance, cm
Ztg = 0.5 # tangential distance, cm
) {
# if no temperature or difference info is provided
# if (is.null(T_up)) {
#   stop("Temperature columns need to be assigned!")
# }
# check whether K is a number or a column
# ck <- try(is.numeric(K),silent = T)
if (is.numeric(K)) {
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("single K")
} else {
K <- enquo(K)
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(!!K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-!!K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("dynamic K")
}
return(df)
}
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=100,
L=7.5)
#' df <- read.csv(file = system.file("extdata", "Soil_resp_example.csv", package = "FluxGapsR"),
#' header=T)
#'
#' # convert the data into long format
#' df <- df %>%
#' pivot_long(cols = contains("SFD"),
#'            names_to = c(".value","Depth"),
#'            names_sep = 7)
#'
#' @export
Cal_HFD <- function(data,
T_up=NULL,
T_low=NULL,
T_side=NULL,
K,
L, # sapwood depth, cm
Dst = 0.0025, # thermal diffusivity, cm2 s-1
Zax = 1.5, # axial distance, cm
Ztg = 0.5 # tangential distance, cm
) {
# if no temperature or difference info is provided
# if (is.null(T_up)) {
#   stop("Temperature columns need to be assigned!")
# }
# check whether K is a number or a column
ck <- try(is.numeric(K),silent = T)
if (ck==T) {
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("single K")
} else {
K <- enquo(K)
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(!!K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-!!K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("dynamic K")
}
return(df)
}
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=100,
L=7.5)
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=K,
L=7.5)
#' df <- read.csv(file = system.file("extdata", "Soil_resp_example.csv", package = "FluxGapsR"),
#' header=T)
#'
#' # convert the data into long format
#' df <- df %>%
#' pivot_long(cols = contains("SFD"),
#'            names_to = c(".value","Depth"),
#'            names_sep = 7)
#'
#' @export
Cal_HFD <- function(data,
T_up=NULL,
T_low=NULL,
T_side=NULL,
K,
L, # sapwood depth, cm
Dst = 0.0025, # thermal diffusivity, cm2 s-1
Zax = 1.5, # axial distance, cm
Ztg = 0.5 # tangential distance, cm
) {
# if no temperature or difference info is provided
# if (is.null(T_up)) {
#   stop("Temperature columns need to be assigned!")
# }
# check whether K is a number or a column
ck <- try(is.numeric(K),silent = T)
if (ck==F) {
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("single K")
} else {
K <- enquo(K)
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(!!K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-!!K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("dynamic K")
}
return(df)
}
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=K,
L=7.5)
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=.1,
L=7.5)
try(is.numeric(K),silent = T)
rm(K)
try(is.numeric(K),silent = T)
ck <- try(is.numeric(K),silent = T)
ck==T
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=.1,
L=7.5)
#' df <- read.csv(file = system.file("extdata", "Soil_resp_example.csv", package = "FluxGapsR"),
#' header=T)
#'
#' # convert the data into long format
#' df <- df %>%
#' pivot_long(cols = contains("SFD"),
#'            names_to = c(".value","Depth"),
#'            names_sep = 7)
#'
#' @export
Cal_HFD <- function(data,
T_up=NULL,
T_low=NULL,
T_side=NULL,
K,
L, # sapwood depth, cm
Dst = 0.0025, # thermal diffusivity, cm2 s-1
Zax = 1.5, # axial distance, cm
Ztg = 0.5 # tangential distance, cm
) {
# if no temperature or difference info is provided
# if (is.null(T_up)) {
#   stop("Temperature columns need to be assigned!")
# }
# check whether K is a number or a column
ck <- try(is.numeric(K),silent = T)
if (ck==T) {
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("single K")
} else {
K <- enquo(K)
T_up <- enquo(T_up) # specify as a variable name
T_low <- enquo(T_low)
T_side <- enquo(T_side)
df <- data %>%
mutate(Sym=!!T_up-!!T_low,
Asym=!!T_side-!!T_low,
SFD_hfd = ifelse(Sym>0,
3600*Dst*(!!K+(Sym-Asym))*Zax/(Asym*Ztg*L), # positive flux, g cm-2 h-1
-3600*Dst*(-!!K+Asym)*Zax/((Sym-Asym)*Ztg*L) # negative flux
)
)
print("dynamic K")
}
return(df)
}
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=.1,
L=7.5)
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=K,
L=7.5)
View(df_hfd)
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=100,
L=7.5)
View(df_hfd)
df <- read.csv("inst/extdata/HFD2J704_202006.csv",header=T)
df <- df %>%
pivot_longer(cols = Temp1U:Temp8S,
names_to = c(".value","Position"),
names_sep = c(5)) %>%
pivot_longer(cols = starts_with(c("K","Temp")),
names_to = c(".value","Depth"),
names_sep = -1) %>%
pivot_wider(names_from = Position,
values_from = Temp) %>%
select(-K)
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=100,
L=7.5)
df <- read.csv("inst/extdata/HFD2J704_202006.csv",header=T)
df <- df %>%
pivot_longer(cols = Temp1U:Temp8S,
names_to = c(".value","Position"),
names_sep = c(5)) %>%
pivot_longer(cols = starts_with(c("K","Temp")),
names_to = c(".value","Depth"),
names_sep = -1) %>%
pivot_wider(names_from = Position,
values_from = Temp)
df_hfd <- Cal_HFD(df,
T_up = U,
T_low = L,
T_side = S,
K=100,
L=7.5)
View(df_hfd)
devtools::document()
?enquo
devtools::document()
#'               values_from = Temp)
#'
#' # calculate sap flow density using dynamic K values that are provided as a variable
#' df_lhb1 <- Cal_LHB(df,T_up = "U",T_low = "L",T_side = "S",K="K",Heat=2.6)
#' head(df_lhb1$SFD_lhb)
#'
#' # calculate sap flow density using constant K value
#' df_lhb2 <- Cal_LHB(df,T_up = "U",T_low = "L",T_side = "S",K=.6,Heat=2.6)
#' head(df_lhb2$SFD_lhb)
#' @export
Cal_LHB <- function(data,
T_up=NULL,
T_low=NULL,
T_side=NULL,
K, # oC; K in HFD
ratio=2, # ratio between Lam_T and Lam_L
Heat, # W m-1
Zax = 1.5, # axial distance, cm
Ztg = 0.5 # tangential distance, cm
) {
# define parameters
cw <- 4.186 # specific heat capacity of water, J g-1 K-1
dx <- Ztg*0.01 # m
dy <- Zax*0.01 # m
H <- Heat # W m-1
k <- ratio
SFD_lhb <- vector(length = nrow(data)) # create a vector for calculated flux
for (i in 1:nrow(data)) {
# variable from data
dT0 <- ifelse(is.numeric(K),-K,-data[i,K]) # oC; K in HFD
T_u <- data[i,T_up] # oC; upper sensor temperature
T_s <- data[i,T_side] # oC; side sensor temperature
T_l <- data[i,T_low] # oC; lower sensor temperature
Sym <- T_u-T_l
# lam_T
lam_T <- H/(2*pi*dT0*sqrt(k))*log(sqrt(k)*dx/dy)
lam_L <- k*lam_T
# equation to solve (eq.3 in Trcala paper)
if (Sym>0){
func1 <- function(Qw){ # positive flux
T_s-T_u+H/(2*pi*sqrt(lam_L*lam_T))*
(exp(cw*Qw*dy/(2*lam_L))*besselK(cw*Qw*dy/(2*lam_L),0)-
besselK(cw*Qw*dx/(2*sqrt(lam_L*lam_T)),0))
}
} else {
func1 <- function(Qw){ # negative flux
T_s-T_l+H/(2*pi*sqrt(lam_L*lam_T))*
(exp(cw*Qw*dy/(2*lam_L))*besselK(cw*Qw*dy/(2*lam_L),0)-
besselK(cw*Qw*dx/(2*sqrt(lam_L*lam_T)),0))
}
} # end of else
Qw <- try(as.numeric(uniroot(func1,interval = c(1e-100,200))$root),
silent = T)
SFD_lhb[i] <- ifelse(class(Qw)=="try-error",
NA,
ifelse(Sym>0,
Qw*0.36, # unit: from g m-2 s-1 to g cm-2 h-1
-Qw*0.36)) # check the direction of the flux
}
dft <- data.frame(data,SFD_lhb)
return(dft)
}
df <- read.csv("inst/extdata/HFD2J704_202006.csv",header=T)
df <- df %>%
pivot_longer(cols = Temp1U:Temp8S,
names_to = c(".value","Position"),
names_sep = c(5)) %>%
pivot_longer(cols = starts_with(c("K","Temp")),
names_to = c(".value","Depth"),
names_sep = -1) %>%
pivot_wider(names_from = Position,
values_from = Temp)
# calculate sap flow density using dynamic K values that are provided as a variable
df_lhb1 <- Cal_LHB(df,T_up = "U",T_low = "L",T_side = "S",K="K",Heat=2.6)
# calculate sap flow density using constant K value
df_lhb2 <- Cal_LHB(df,T_up = "U",T_low = "L",T_side = "S",K=.6,Heat=2.6)
head(df_lhb2$SFD_lhb)
View(df_lhb2)
df <- read.csv("inst/extdata/HFD2J704_202006.csv",header=T)
df <- df %>%
pivot_longer(cols = Temp1U:Temp8S,
names_to = c(".value","Position"),
names_sep = c(5)) %>%
pivot_longer(cols = starts_with(c("K","Temp")),
names_to = c(".value","Depth"),
names_sep = -1) %>%
pivot_wider(names_from = Position,
values_from = Temp)
View(df)
# calculate sap flow density using constant K value
df_lhb2 <- Cal_LHB(df,T_up = "U",T_low = "L",T_side = "S",K=.6,Heat=2.6)
View(df_lhb2)
